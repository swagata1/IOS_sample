"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var configuration_1 = require('../shared/configuration');
var localStorageService_1 = require('../shared/localStorageService');
var validationMessages_1 = require('../shared/validationMessages');
var FirePumpChartComponent = (function () {
    function FirePumpChartComponent(localStorageService) {
        this.localStorageService = localStorageService;
    }
    FirePumpChartComponent.prototype.showModal = function () {
        this.showChart(this.inputChartData, this.testDataInd);
    };
    FirePumpChartComponent.prototype.hideModal = function () {
        this.modal.hide();
    };
    FirePumpChartComponent.prototype.ngOnInit = function () {
    };
    FirePumpChartComponent.prototype.showChart = function (firePump, testDataInd) {
        this.chartData = [];
        var testData = [];
        var testResults;
        var correctedResults;
        var nominalRated = {
            key: 'Nominal/Rated',
            values: []
        };
        var pOne;
        var pTwo;
        var pThree;
        if (firePump.churnPressure) {
            pOne = {
                x: 0,
                y: Math.round(firePump.churnPressure * 100) / 100
            };
        }
        else {
            pOne = {
                x: 0,
                y: 1.2 * Math.round(firePump.NOMINAL_PUMP_PRESSURE_QT * 100) / 100
            };
        }
        nominalRated.values.push(pOne);
        pTwo = {
            x: Math.round(firePump.NOMINAL_PUMP_FLOW_QT * 100) / 100,
            y: Math.round(firePump.NOMINAL_PUMP_PRESSURE_QT * 100) / 100
        };
        nominalRated.values.push(pTwo);
        if (firePump.maxFlow && firePump.pressureMaxFlow) {
            pThree = {
                x: Math.round(firePump.maxFlow * 100) / 100,
                y: Math.round(firePump.pressureMaxFlow * 100) / 100
            };
        }
        else {
            pThree = {
                x: 1.5 * Math.round(firePump.NOMINAL_PUMP_FLOW_QT * 100) / 100,
                y: 0.65 * Math.round(firePump.NOMINAL_PUMP_PRESSURE_QT * 100) / 100
            };
        }
        nominalRated.values.push(pThree);
        if (firePump.FirePumpPerfList.length > 0) {
            for (var j = 0; j < firePump.FirePumpPerfList.length; j++) {
                if (j == testDataInd && firePump.FirePumpPerfList[j].GRAPH_INCLUSION_IN == true && firePump.FirePumpPerfList[j].FirePumpTestPointsList.length > 0) {
                    testResults = {
                        key: 'Test Results',
                        values: []
                    };
                    correctedResults = {
                        key: 'Corrected Results',
                        values: [],
                        dashed: true
                    };
                    for (var i = 0; i < firePump.FirePumpPerfList[j].FirePumpTestPointsList.length; i++) {
                        var temp = firePump.FirePumpPerfList[j].FirePumpTestPointsList[i];
                        if (temp.MEASURED_FLOW_QT && temp.NET_PRESSURE_QT) {
                            var tr = {
                                x: Math.round(temp.MEASURED_FLOW_QT * 100) / 100,
                                y: Math.round(temp.NET_PRESSURE_QT * 100) / 100
                            };
                            testResults.values.push(tr);
                        }
                        if (temp.CORRECTED_FLOW_QT && temp.CORRECTED_PRESSURE_QT) {
                            var cr = {
                                x: Math.round(temp.CORRECTED_FLOW_QT * 100) / 100,
                                y: Math.round(temp.CORRECTED_PRESSURE_QT * 100) / 100
                            };
                            correctedResults.values.push(cr);
                        }
                    }
                    this.chartData = [testResults, correctedResults, nominalRated];
                }
            }
        }
        var xLabel = 'Flow (' + this.xUnit + ')';
        var yLabel = 'Pressure (' + this.yUnit + ')';
        this.optionsData = {
            chart: {
                type: 'lineChart',
                height: 300,
                width: 900,
                margin: {
                    top: 50,
                    right: 50,
                    bottom: 50,
                    left: 180
                },
                useInteractiveGuideline: true,
                x: function (d) {
                    return d.x;
                },
                y: function (d) {
                    return d.y;
                },
                showValues: true,
                valueFormat: function (d) {
                    return d3.format(',.4f')(d);
                },
                transitionDuration: 500,
                xAxis: {
                    axisLabel: xLabel,
                    tickFormat: function (d) {
                        return d3.format(',2r')(d);
                    },
                },
                yAxis: {
                    axisLabel: yLabel,
                    axisLabelDistance: -10
                }
            }
        };
        this.modal.show();
    };
    __decorate([
        core_1.ViewChild('firePumpChartModal'), 
        __metadata('design:type', core_1.ElementRef)
    ], FirePumpChartComponent.prototype, "modal", void 0);
    FirePumpChartComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'fire-pump-chart',
            templateUrl: 'firePumpChart.component.html',
            providers: [configuration_1.Configuration, localStorageService_1.LocalStorageService, validationMessages_1.ValidationMessages],
            inputs: ['inputChartData', 'testDataInd', 'xUnit', 'yUnit']
        }), 
        __metadata('design:paramtypes', [localStorageService_1.LocalStorageService])
    ], FirePumpChartComponent);
    return FirePumpChartComponent;
}());
exports.FirePumpChartComponent = FirePumpChartComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
