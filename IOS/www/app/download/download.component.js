"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var download_service_1 = require('./download.service');
var ipcSenderService_1 = require('./../shared/ipcSenderService');
var common_service_1 = require('./../shared/services/common.service');
var DownloadComponent = (function () {
    function DownloadComponent(downService, ipcSS, commonService) {
        this.downService = downService;
        this.ipcSS = ipcSS;
        this.commonService = commonService;
        this.downloadedSite = new core_1.EventEmitter();
        this.upstreamDirName = 'upstream';
        this.downstreamDirName = 'downstream';
        this.downService = downService;
        this.ipcSS = ipcSS;
        this.isDownloading = false;
        this.downloadFailed = false;
    }
    DownloadComponent.prototype.ngOnInit = function () {
    };
    DownloadComponent.prototype.downloadData = function () {
        var _this = this;
        this.isDownloading = true;
        this.rfsDirName = this.site.RFS_PARENT_ID + '-' + this.site.RFS_ID;
        var index = this.index;
        var locationObj = this.site;
        var downloadedServicesCount = [];
        var downstreamDirPath = '/' + this.rfsDirName + '/' + this.downstreamDirName;
        this.downService.getLocationAssessment(locationObj.RFS_PARENT_ID, locationObj.RFS_ID).subscribe(function (data) {
            downloadedServicesCount.push('getLocationAssessment');
            _this.downloadStatus(downloadedServicesCount, index, locationObj);
            _this.ipcOperation = {
                "doAction": "saveData",
                "data": data,
                "contentType": 'json',
                "dirRelativePath": downstreamDirPath,
                "fileName": "/location-assessment.json"
            };
            _this.ipcSS.ipcAsyncSend(_this.ipcOperation);
        }, function (error) {
            downloadedServicesCount.push('getLocationAssessment');
            _this.downloadStatus(downloadedServicesCount, index, locationObj);
        });
        this.downService.getRfsImages(locationObj.GRASP_ACCOUNT_ID, locationObj.RFS_ID).subscribe(function (rfsImageData) {
            downloadedServicesCount.push('getRfsImages');
            _this.downloadStatus(downloadedServicesCount, index, locationObj);
            _this.ipcOperation = {
                "doAction": "saveData",
                "data": rfsImageData,
                "contentType": 'json',
                "dirRelativePath": downstreamDirPath,
                "fileName": "/rfs-images.json"
            };
            _this.ipcSS.ipcAsyncSend(_this.ipcOperation);
        }, function (error) {
            downloadedServicesCount.push('getRfsImages');
            _this.downloadStatus(downloadedServicesCount, index, locationObj);
        });
        this.downService.getRfsMetadata(locationObj.GRASP_ACCOUNT_ID, locationObj.RFS_PARENT_ID, locationObj.RFS_ID, "ENG").subscribe(function (rfsMetadata) {
            downloadedServicesCount.push('getRfsMetadata');
            _this.downloadStatus(downloadedServicesCount, index, locationObj);
            _this.ipcOperation = {
                "doAction": "saveData",
                "data": rfsMetadata,
                "contentType": 'json',
                "dirRelativePath": downstreamDirPath,
                "fileName": "/rfs-documents-metadata.json"
            };
            _this.ipcSS.ipcAsyncSend(_this.ipcOperation);
            _this.rfsMetadata = rfsMetadata;
            var documentPidArray = [];
            var requestPayLoad;
            if (_this.rfsMetadata && _this.rfsMetadata.svcRFSDocsMetaDataResPL && _this.rfsMetadata.svcRFSDocsMetaDataResPL.length > 0) {
                for (var i = 0; i < _this.rfsMetadata.svcRFSDocsMetaDataResPL.length; i++) {
                    documentPidArray.push({ "DOCUMENT_PID": _this.rfsMetadata.svcRFSDocsMetaDataResPL[i].DOCUMENT_PID });
                }
                requestPayLoad = { "pxObjClass": _this.rfsMetadata.pxObjClass, "svcViewCMSAttachsURLReqPL": documentPidArray };
                _this.downService.viewCms(requestPayLoad).subscribe(function (viewCms) {
                    _this.viewCms = viewCms;
                    downloadedServicesCount.push('viewCms');
                    _this.downloadStatus(downloadedServicesCount, index, locationObj);
                    _this.ipcOperation = {
                        "doAction": "saveData",
                        "data": viewCms,
                        "contentType": 'json',
                        "dirRelativePath": downstreamDirPath,
                        "fileName": "/view-cms-attachments-URL.json"
                    };
                    _this.ipcSS.ipcAsyncSend(_this.ipcOperation);
                    if (_this.viewCms && _this.viewCms.svcViewCMSAttachsURLResPL && _this.viewCms.svcViewCMSAttachsURLResPL.length > 0) {
                        for (var i = 0; i < _this.viewCms.svcViewCMSAttachsURLResPL.length; i++) {
                            var downloadString = _this.viewCms.svcViewCMSAttachsURLResPL[i].DocumentURLString;
                            if (_this.rfsMetadata.svcRFSDocsMetaDataResPL[i].DOCUMENT_PID == _this.viewCms.svcViewCMSAttachsURLResPL[i].DOCUMENT_PID) {
                                _this.docName = _this.rfsMetadata.svcRFSDocsMetaDataResPL[i].DOCUMENT_NM;
                            }
                            var fileName = _this.docName;
                            _this.ipcOperation1 = {
                                "doAction": "saveData",
                                "data": _this.viewCms.svcViewCMSAttachsURLResPL[i].DocumentURLString,
                                "contentType": 'application',
                                "dirRelativePath": downstreamDirPath,
                                "fileName": "/" + fileName
                            };
                            _this.ipcSS.ipcAsyncSend(_this.ipcOperation1);
                        }
                    }
                }, function (error) { console.log("error from view cms"); });
            }
            else {
                downloadedServicesCount.push('viewCms');
                _this.downloadStatus(downloadedServicesCount, index, locationObj);
            }
        }, function (error) {
            downloadedServicesCount.push('getRfsMetadata');
            _this.downloadStatus(downloadedServicesCount, index, locationObj);
        });
        this.downService.getRfsReport(locationObj.RFS_PARENT_ID, locationObj.RFS_ID).subscribe(function (rfsReport) {
            downloadedServicesCount.push('getRfsReport');
            _this.downloadStatus(downloadedServicesCount, index, locationObj);
            _this.ipcOperation = {
                "doAction": "saveData",
                "data": rfsReport,
                "contentType": 'json',
                "dirRelativePath": downstreamDirPath,
                "fileName": "/rfs-report.json"
            };
            _this.ipcSS.ipcAsyncSend(_this.ipcOperation);
        }, function (error) {
            downloadedServicesCount.push('getRfsReport');
            _this.downloadStatus(downloadedServicesCount, index, locationObj);
        });
        return locationObj;
    };
    DownloadComponent.prototype.downloadStatus = function (count, index, locObj) {
        var _this = this;
        if (count.length == 5) {
            this.rfsDirName = this.site.RFS_PARENT_ID + '-' + this.site.RFS_ID;
            var downstreamDirPath_1 = '/' + this.rfsDirName + '/' + this.downstreamDirName;
            var upstreamDirPath_1 = '/' + this.rfsDirName + '/' + this.upstreamDirName;
            setTimeout(function () {
                _this.commonService.checkData(locObj.RFS_PARENT_ID, locObj.RFS_ID).subscribe(function (locationData) {
                    if (locationData && locationData.LocationAssessment && locationData.LocationAssessment.LAWorkPageList && locationData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList) {
                        _this.ipcOperation = {
                            "doAction": "cloneForUpdate",
                            "srcRelativePath": downstreamDirPath_1,
                            "destRelativePath": upstreamDirPath_1
                        };
                        _this.ipcSS.ipcAsyncSend(_this.ipcOperation);
                        _this.downService.lockRfs(locObj.RFS_PARENT_ID, locObj.RFS_ID, 'Lock').subscribe(function (lockResponse) {
                            console.log(lockResponse);
                            locObj.downloadIndicator = 'T';
                            _this.isDownloading = false;
                            _this.downloadedSite.emit(locObj);
                        });
                    }
                    else {
                        _this.ipcOperation = {
                            "doAction": "removeDirNContent",
                            "dirRelativePath": "/" + _this.rfsDirName
                        };
                        _this.ipcSS.ipcAsyncSend(_this.ipcOperation);
                        locObj.downloadIndicator = 'F';
                        _this.isDownloading = false;
                        _this.downloadFailed = true;
                        _this.downloadedSite.emit(locObj);
                    }
                });
            }, 15000);
        }
        return locObj;
    };
    DownloadComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'download-survey',
            templateUrl: 'download.component.html',
            providers: [download_service_1.DownloadService, ipcSenderService_1.ipcSenderService],
            inputs: ['index', 'site', 'currState'],
            outputs: ['downloadedSite']
        }), 
        __metadata('design:paramtypes', [download_service_1.DownloadService, ipcSenderService_1.ipcSenderService, common_service_1.CommonService])
    ], DownloadComponent);
    return DownloadComponent;
}());
exports.DownloadComponent = DownloadComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
