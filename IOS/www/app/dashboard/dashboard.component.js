"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var router_1 = require('@angular/router');
var dashboard_service_1 = require('./dashboard.service');
var configuration_1 = require('../shared/configuration');
var localStorageService_1 = require('../shared/localStorageService');
var componentCommunicationService_1 = require('../shared/componentCommunicationService');
var ipcSenderService_1 = require('./../shared/ipcSenderService');
var DashboardComponent = (function () {
    function DashboardComponent(router, dashService, localStorageService, ccs, ipcSS) {
        var _this = this;
        this.router = router;
        this.dashService = dashService;
        this.localStorageService = localStorageService;
        this.ccs = ccs;
        this.ipcSS = ipcSS;
        this.comm = { currentState: 'dashboard', isDownloaded: false };
        this.navKind = "content-right";
        this.router = router;
        this.ipcSS = ipcSS;
        this.dashService = dashService;
        this.sortBy = 'REPORT_DUE_DT';
        this.downloadedLocation = [];
        this.isLoading = true;
        this.dashService.getDashboardData().subscribe(function (data) {
            _this.getDashboardDataFromServer = data;
            var dashData = _this.getDashboardDataFromServer;
            if (dashData && dashData.myWorkListResponsePL) {
                var filteredData = _this.filteringDashboardData(dashData.myWorkListResponsePL);
                _this.sites = dashData.myWorkListResponsePL;
            }
            var ipcOperation = {
                "doAction": "saveData",
                "data": data,
                "contentType": 'json',
                "dirRelativePath": '',
                "fileName": "/my-worklist.json"
            };
            _this.ipcSS.ipcAsyncSend(ipcOperation);
        }, function (error) { console.log("error from service"); }, function () { _this.isLoading = false; console.log("job done", _this.getDashboardDataFromServer); });
    }
    DashboardComponent.prototype.filteringDashboardData = function (worklist) {
        var todaysDate = new Date().toISOString();
        for (var i in worklist) {
            if (worklist[i] && worklist[i].REPORT_DUE_DT) {
                worklist[i].repoDateDiff = Math.floor((Date.parse(worklist[i].REPORT_DUE_DT) - Date.parse(todaysDate)) / 86400000) + 1;
                worklist[i].reportDueDiff = this.getDateRange(worklist[i].repoDateDiff);
            }
            if (worklist[i] && worklist[i].SURVEY_START_DT) {
                worklist[i].surveyStartDtDiff = Math.floor((Date.parse(worklist[i].SURVEY_START_DT) - Date.parse(todaysDate)) / 86400000) + 1;
                worklist[i].surveyStartDiff = this.getDateRange(worklist[i].surveyStartDtDiff);
            }
            if (worklist[i] && worklist[i].SURVEY_END_DT) {
                worklist[i].SURVEY_END_DT = this.formatDates(worklist[i].SURVEY_END_DT);
                worklist[i].surveyEndDtDiff = Math.floor((Date.parse(worklist[i].SURVEY_END_DT) - Date.parse(todaysDate)) / 86400000) + 1;
                worklist[i].surveyEndDiff = this.getDateRange(worklist[i].surveyEndDtDiff);
            }
            if (worklist[i] && worklist[i].SURVEY_DUEDATE_TYPE_CD == 'R') {
                worklist[i].displayedSurveyDates = worklist[i].SURVEY_START_DT || null;
            }
            else if (worklist[i] && worklist[i].SURVEY_DUEDATE_TYPE_CD == 'F') {
                worklist[i].displayedSurveyDates = worklist[i].SURVEY_END_DT || null;
            }
            var filePath = worklist[i].RFS_PARENT_ID + '-' + worklist[i].RFS_ID;
            var ipcOperation = {
                "doAction": "isDirExist",
                "dirRelativePath": "/" + filePath
            };
            var dirPath = this.ipcSS.ipcSyncSend(ipcOperation);
            worklist[i].downloadIndicator = dirPath.result == false ? 'F' : 'T';
        }
        this.ccs.setObject(worklist);
        return worklist;
    };
    DashboardComponent.prototype.formatDates = function (d1) {
        var date1;
        var d1Parts = d1.substring(0, 10).split("-");
        date1 = [d1Parts[1], d1Parts[2], d1Parts[0]].join('/');
        date1 = new Date(date1);
        return date1;
    };
    DashboardComponent.prototype.navigate = function (rowData) {
        var locationData = rowData;
        this.localStorageService.set('currState', 'detailspage');
        this.ccs.setSelectedAcc(locationData);
        this.localStorageService.set('locationData', locationData);
        this.localStorageService.removeItem('name');
        this.router.navigate(['/detailspage']);
    };
    DashboardComponent.prototype.toggleSortDrop = function () {
        if (!this.dropopen || this.dropopen == '') {
            this.dropopen = 'open';
        }
        else if (this.dropopen == "open") {
            this.dropopen = '';
        }
        return this.dropopen;
    };
    DashboardComponent.prototype.toggleSortDropClose = function (event) {
        var target = event.target;
        if (!target.closest('.material-icons')) {
            this.dropopen = '';
        }
    };
    DashboardComponent.prototype.sortByCustom = function (value) {
        if (value == 'Report') {
            this.sortBy = 'REPORT_DUE_DT';
        }
        else if (value == 'Survey') {
            this.sortBy = 'displayedSurveyDates';
        }
    };
    DashboardComponent.prototype.downloadedSite = function (site) {
        return site;
    };
    DashboardComponent.prototype.navigateEvent = function (acc) {
        this.ccs.setSelectedAcc(acc);
    };
    DashboardComponent.prototype.getDateRange = function (dayCount) {
        var displayRange;
        dayCount = Number(dayCount);
        if (dayCount == 0) {
            displayRange = 'Today';
        }
        else if (dayCount == 1) {
            displayRange = 'Tomorrow';
        }
        else if (dayCount == -1) {
            displayRange = 'Yesterday';
        }
        else if (dayCount < -1) {
            displayRange = Math.abs(dayCount) + ' days ago';
        }
        else if (dayCount < 8) {
            displayRange = dayCount + ' days';
        }
        else if (dayCount > 7 && dayCount < 15) {
            displayRange = 'week';
        }
        else if (dayCount > 14 && dayCount < 22) {
            displayRange = '2 weeks';
        }
        else if (dayCount > 21 && dayCount < 32) {
            displayRange = '3 weeks';
        }
        else if (dayCount > 31 && dayCount < 62) {
            displayRange = '1 month';
        }
        else if (dayCount > 61 && dayCount < 92) {
            displayRange = '2 months';
        }
        else {
            displayRange = 'Future';
        }
        return displayRange;
    };
    ;
    DashboardComponent.prototype.ngOnInit = function () {
        this.ccs.setLogged(this.comm);
    };
    DashboardComponent.prototype.getSurveyImageId = function (cntr) {
        if (cntr % 5 == 0)
            return 5;
        else
            return cntr % 5;
    };
    DashboardComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'axis-dashboard',
            templateUrl: 'dashboard.component.html',
            styleUrls: ['dasboard.component.css'],
            providers: [dashboard_service_1.DashboardService, configuration_1.Configuration, localStorageService_1.LocalStorageService, ipcSenderService_1.ipcSenderService]
        }), 
        __metadata('design:paramtypes', [router_1.Router, dashboard_service_1.DashboardService, localStorageService_1.LocalStorageService, componentCommunicationService_1.ComponentCommunicationService, ipcSenderService_1.ipcSenderService])
    ], DashboardComponent);
    return DashboardComponent;
}());
exports.DashboardComponent = DashboardComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
