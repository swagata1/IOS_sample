"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var common_1 = require('@angular/common');
var componentCommunicationService_1 = require('../../../shared/componentCommunicationService');
var localStorageService_1 = require('../../../shared/localStorageService');
var validationMessages_1 = require('../../../shared/validationMessages');
var event_model_1 = require('../../../shared/model/event.model');
var offline_service_1 = require('../../../shared/services/offline.service');
var hazards_service_1 = require('../../shared/hazards.service');
var location_data_model_1 = require('../../../shared/model/location-data.model');
var HazardsSummaryComponent = (function () {
    function HazardsSummaryComponent(hazardsService, offlineService, ccs, localStorageService) {
        this.hazardsService = hazardsService;
        this.offlineService = offlineService;
        this.ccs = ccs;
        this.localStorageService = localStorageService;
        this.occupancy_cd = 2;
        this.mainTypeDrop = [];
        this.typeDrop = [];
        this.categoryDesc = [];
    }
    HazardsSummaryComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.site = this.localStorageService.get('locationData');
        this.getOccupancyData();
        if (this.viewType && this.viewType == 'small')
            this.hazardsSummarySmallView = true;
        this.getData();
        this.ccs.getHazardAddData().subscribe(function (data) {
            if (data.state == "New") {
                _this.categoryDesc = [];
                _this.mainTypeDrop = [];
                _this.typeDrop = [];
                _this.hazardAddDataObj = data.hazardObj;
                _this.hazardsSummary.push(_this.hazardAddDataObj);
                for (var i = 0; i < _this.hazardsSummary.length; i++) {
                    var a = _this.mainType.filter(function (item) { return item.Code == _this.hazardsSummary[i].HAZARD_MAIN_TYPE_CD; });
                    var maintype = a.length > 0 ? a[0].Description : "";
                    _this.mainTypeDrop.push(maintype);
                }
                for (var i = 0; i < _this.hazardsSummary.length; i++) {
                    var b = _this.type.filter(function (item) { return item.Code == _this.hazardsSummary[i].HAZARD_TYPE_CD; });
                    var type = b.length > 0 ? b[0].Description : "";
                    _this.typeDrop.push(type);
                }
                for (var i = 0; i < _this.hazardsSummary.length; i++) {
                    var c = _this.catOccData.filter(function (item) { return item.ELEMENT_CD == _this.hazardsSummary[i].HAZARD_CATEGORY_CD; });
                    var categoryDescription = c.length > 0 ? c[0].Description : "";
                    _this.categoryDesc.push(categoryDescription);
                }
                data.state = "";
            }
            else if (data.state == "Update") {
                _this.hazardsSummary[data.index] = data.hazardObj;
                var a = _this.mainType.filter(function (item) { return item.Code == _this.hazardsSummary[data.index].HAZARD_MAIN_TYPE_CD; });
                var maintype = a.length > 0 ? a[0].Description : "";
                _this.mainTypeDrop[data.index] = maintype;
                var b = _this.type.filter(function (item) { return item.Code == _this.hazardsSummary[data.index].HAZARD_TYPE_CD; });
                var type = b.length > 0 ? b[0].Description : "";
                _this.typeDrop[data.index] = type;
                var c = _this.catOccData.filter(function (item) { return item.ELEMENT_CD == _this.hazardsSummary[data.index].HAZARD_CATEGORY_CD; });
                var categoryDescription = c.length > 0 ? c[0].Description : "";
                _this.categoryDesc[data.index] = categoryDescription;
                data.state = "";
            }
        });
        this.ccs.getHazardsData().subscribe(function (data) {
            _this.setHazardsSummaryObject(data);
        });
        this.saveInterval = setInterval(function () {
            console.log("Requesting wind peril to save for rfs parent:", _this.site.RFS_PARENT_ID, "and rfs:", _this.site.RFS_ID);
            _this.saveDataToFile(new event_model_1.Event(_this.site.RFS_PARENT_ID, _this.site.RFS_ID, 'save'));
        }, 30000);
    };
    HazardsSummaryComponent.prototype.ngOnDestroy = function () {
        if (this.saveInterval) {
            clearInterval(this.saveInterval);
            this.saveDataToFile(new event_model_1.Event(this.site.RFS_PARENT_ID, this.site.RFS_ID, 'save'));
            console.log("Save interval cleared and data saved for Flood.");
        }
    };
    HazardsSummaryComponent.prototype.getData = function () {
        this.getCategoryDropdownData();
        this.getMainTypeDropdownData();
        this.getTypeDropdownData();
    };
    HazardsSummaryComponent.prototype.getMainTypeDropdownData = function () {
        var _this = this;
        this.hazardsService.getMainTypeDropdownData().subscribe(function (data) {
            _this.mainType = data;
        }, function (err) { return console.error(err); });
    };
    HazardsSummaryComponent.prototype.getCategoryDropdownData = function () {
        var _this = this;
        this.hazardsService.getCategoryOccupancyDropdownData().subscribe(function (data) {
            _this.catOccData = data.filter(function (item) { return item.OCCUPANCY_CD == _this.occupancy_cd; });
        }, function (err) { return console.error(err); });
    };
    HazardsSummaryComponent.prototype.getOccupancyData = function () {
        var _this = this;
        this.hazardsService.getSprinklersData(this.site.RFS_PARENT_ID, this.site.RFS_ID).subscribe(function (data) {
            _this.occupancy_cd = data.AssessmentLocationList[0].LocAssessment.COPE_PAGE.OCCUPANCY_CD;
        }, function (err) { return console.error(err); });
    };
    HazardsSummaryComponent.prototype.getTypeDropdownData = function () {
        var _this = this;
        this.hazardsService.getTypeDropdownData().subscribe(function (data) {
            _this.type = data;
        }, function (err) { return console.error(err); });
    };
    HazardsSummaryComponent.prototype.setHazardsSummaryObject = function (data) {
        var _this = this;
        this.hazardsSummary = data.hazards;
        if (this.mainType) {
            for (var i = 0; i < this.hazardsSummary.length; i++) {
                var a = this.mainType.filter(function (item) { return item.Code == _this.hazardsSummary[i].HAZARD_MAIN_TYPE_CD; });
                var maintype = a.length > 0 ? a[0].Description : "";
                this.mainTypeDrop.push(maintype);
                var b = this.type.filter(function (item) { return item.Code == _this.hazardsSummary[i].HAZARD_TYPE_CD; });
                var type = b.length > 0 ? b[0].Description : "";
                this.typeDrop.push(type);
                var c = this.catOccData.filter(function (item) { return item.ELEMENT_CD == _this.hazardsSummary[i].HAZARD_CATEGORY_CD; });
                var categoryDescription = c.length > 0 ? c[0].Description : "";
                this.categoryDesc.push(categoryDescription);
            }
        }
        console.log("Summary Component Hazards Data : ", this.hazardsSummary);
    };
    HazardsSummaryComponent.prototype.deleteEstimate = function (summary, index) {
        this.hazardsSummary.splice(index, 1);
        this.mainTypeDrop.splice(index, 1);
        this.typeDrop.splice(index, 1);
        this.categoryDesc.splice(index, 1);
    };
    HazardsSummaryComponent.prototype.copyEstimate = function (summary, index) {
        var _this = this;
        this.hazardsSummary.push(summary);
        var a = this.mainType.filter(function (item) { return item.Code == _this.hazardsSummary[index].HAZARD_MAIN_TYPE_CD; });
        var maintype = a.length > 0 ? a[0].Description : "";
        this.mainTypeDrop.push(maintype);
        var b = this.type.filter(function (item) { return item.Code == _this.hazardsSummary[index].HAZARD_TYPE_CD; });
        var type = b.length > 0 ? b[0].Description : "";
        this.typeDrop.push(type);
        var c = this.catOccData.filter(function (item) { return item.ELEMENT_CD == _this.hazardsSummary[index].HAZARD_CATEGORY_CD; });
        var categoryDescription = c.length > 0 ? c[0].Description : "";
        this.categoryDesc.push(categoryDescription);
    };
    HazardsSummaryComponent.prototype.saveDataToFile = function (event) {
        var _this = this;
        var rfsParentId = this.site.RFS_PARENT_ID;
        var rfsId = this.site.RFS_ID;
        if (event.getType() == 'save' && event.getRfsParentId() == rfsParentId && event.getRfsId() == rfsId) {
            this.offlineService.readLocationData(rfsParentId, rfsId).subscribe(function (data) {
                var locData = data;
                locData.LocationAssessment.LAWorkPageList[0].
                    AssessmentLocationList[0].LocAssessment.OccupancyHazard.HazardList = _this.hazardsSummary;
                var locationDataModel = new location_data_model_1.LocationDataModel(rfsParentId, rfsId, 'hazards');
                locationDataModel.setRawData(locData);
                _this.offlineService.writeLocationData(locationDataModel);
            });
        }
    };
    HazardsSummaryComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'hazards-summary',
            templateUrl: 'hazards-summary.component.html',
            inputs: ['viewType'],
            providers: [validationMessages_1.ValidationMessages, common_1.DatePipe, localStorageService_1.LocalStorageService, offline_service_1.OfflineService, hazards_service_1.HazardsService]
        }), 
        __metadata('design:paramtypes', [hazards_service_1.HazardsService, offline_service_1.OfflineService, componentCommunicationService_1.ComponentCommunicationService, localStorageService_1.LocalStorageService])
    ], HazardsSummaryComponent);
    return HazardsSummaryComponent;
}());
exports.HazardsSummaryComponent = HazardsSummaryComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
