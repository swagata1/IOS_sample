"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var componentCommunicationService_1 = require('../../shared/componentCommunicationService');
var localStorageService_1 = require('../../shared/localStorageService');
var validationMessages_1 = require('../../shared/validationMessages');
var hazards_service_1 = require('../shared/hazards.service');
var offline_service_1 = require('../../shared/services/offline.service');
var event_model_1 = require('../../shared/model/event.model');
var location_data_model_1 = require('../../shared/model/location-data.model');
var HazardsRatingsComponent = (function () {
    function HazardsRatingsComponent(service, localStorageService, ccs, offlineService) {
        this.service = service;
        this.localStorageService = localStorageService;
        this.ccs = ccs;
        this.offlineService = offlineService;
        this.hazardCategories = [];
        this.ratingAnswers = [];
        this.hazardsRatings = [];
        this.riLinks = [];
        this.hazardList = [];
        this.riCnt = {};
    }
    HazardsRatingsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.site = this.localStorageService.get('locationData');
        var rfsParentId = this.site.RFS_PARENT_ID;
        var rfsId = this.site.RFS_ID;
        this.getRatingAnswers();
        this.service.getHazardsData(rfsParentId, rfsId).subscribe(function (data) {
            _this.predominantTS = data.predominantTS;
            var hazardQuesCat = data.hazardsRatings.filter(function (item) { return item.QUESTION_CATEGORY_NM == "Hazards"; });
            _this.hazardsRatings = hazardQuesCat[0]['TQuestion'];
            _this.riLinks = data.riLinks;
            _this.hazardList = data.hazardList;
            _this.getHazardCategories();
            _this.getHazardsRatingCP();
        }, function (err) { return console.error(err); }, function () { });
    };
    HazardsRatingsComponent.prototype.calculateRi = function () {
        var _this = this;
        var _loop_1 = function(i) {
            var hazardCategory = [];
            if (this_1.riLinks[i].LINKED_HAZARDS) {
                var _loop_2 = function(j) {
                    var linkedHazard = this_1.hazardList.find(function (item) { return item.HAZARD_RANDOM_ID_TOLINK == _this.riLinks[i].LINKED_HAZARDS[j]; });
                    var presentFlag = hazardCategory.find(function (item) { return item == linkedHazard.HAZARD_CATEGORY_Desc; });
                    if (!presentFlag) {
                        hazardCategory.push(linkedHazard.HAZARD_CATEGORY_Desc);
                        if (this_1.riCnt[linkedHazard.HAZARD_CATEGORY_Desc]) {
                            this_1.riCnt[linkedHazard.HAZARD_CATEGORY_Desc] = this_1.riCnt[linkedHazard.HAZARD_CATEGORY_Desc] + 1;
                        }
                        else {
                            this_1.riCnt[linkedHazard.HAZARD_CATEGORY_Desc] = 1;
                        }
                    }
                };
                for (var j = 0; j < this_1.riLinks[i].LINKED_HAZARDS.length; j++) {
                    _loop_2(j);
                }
            }
        };
        var this_1 = this;
        for (var i = 0; i < this.riLinks.length; i++) {
            _loop_1(i);
        }
        console.log("----------hazardLinkedList");
        console.log(this.riCnt);
        var _loop_3 = function(k) {
            var hazardCategoryRi = this_2.hazardCategories.find(function (item) { return item.QUESTION_TX == k; });
            if (hazardCategoryRi) {
                hazardCategoryRi.riCount = this_2.riCnt[k];
            }
        };
        var this_2 = this;
        for (var k in this.riCnt) {
            _loop_3(k);
        }
    };
    HazardsRatingsComponent.prototype.getRatingAnswers = function () {
        var _this = this;
        this.service.getRatingAnswers().subscribe(function (data) {
            _this.ratingAnswers = data.filter(function (item) { return item.RatQueCategory == "Hazards - Process & Common"; });
        }, function (err) { return console.error(err); }, function () { });
    };
    HazardsRatingsComponent.prototype.getHazardsRatingCP = function () {
        var _this = this;
        this.service.getHazardsRatingCP().subscribe(function (data) {
            _this.hazardCategories = data.filter(function (item) { return item.OCCUPANCY_CD == _this.predominantTS && item.QUESTION_CATEGORY_NM == "Hazards"; });
            _this.getHazardCategories();
        }, function (err) { return console.error(err); }, function () { });
    };
    HazardsRatingsComponent.prototype.getHazardCategories = function () {
        var _this = this;
        for (var i = 0; i < this.hazardCategories.length; i++) {
            this.hazardCategories[i].currentRatingAns = JSON.parse(JSON.stringify(this.ratingAnswers));
            this.hazardCategories[i].postRatingAns = JSON.parse(JSON.stringify(this.ratingAnswers));
            var _loop_4 = function(j) {
                if (this_3.hazardCategories[i].QUESTION_ID == this_3.hazardsRatings[j].QUESTION_ID) {
                    if (this_3.hazardsRatings[j].Score || this_3.hazardsRatings[j].Score == "0") {
                        var currentRatingObj = this_3.ratingAnswers.filter(function (item) { return item.Scores == _this.hazardsRatings[j].Score; });
                        if (currentRatingObj.length > 0) {
                            this_3.hazardCategories[i].CURRENT_RATING = currentRatingObj[0].RatNarrative;
                        }
                    }
                    if (this_3.hazardsRatings[j].ScoreCPPost || this_3.hazardsRatings[j].ScoreCPPost == "0") {
                        var postRatingObj = this_3.ratingAnswers.filter(function (item) { return item.Scores == _this.hazardsRatings[j].ScoreCPPost; });
                        if (postRatingObj.length > 0) {
                            this_3.hazardCategories[i].POST_RI_RATING = postRatingObj[0].RatNarrative;
                        }
                    }
                }
            };
            var this_3 = this;
            for (var j = 0; j < this.hazardsRatings.length; j++) {
                _loop_4(j);
            }
            if (i == (this.hazardCategories.length - 1)) {
                this.calculateRi();
            }
        }
    };
    HazardsRatingsComponent.prototype.ngOnDestroy = function () {
    };
    HazardsRatingsComponent.prototype.changeCurrentRating = function (currentRating, category) {
        var currentRatingScore = parseInt(currentRating.Scores);
        var site = this.localStorageService.get('locationData');
        category.postRatingAns = [];
        if (currentRatingScore <= 6) {
            category.ratingLow = true;
        }
        for (var i = 0; i < this.ratingAnswers.length; i++) {
            if (parseInt(this.ratingAnswers[i].Scores) >= currentRatingScore) {
                category.postRatingAns.push(this.ratingAnswers[i]);
            }
        }
        this.saveDataToFile(new event_model_1.Event(site.RFS_PARENT_ID, site.RFS_ID, 'save'), category, currentRating.Scores, "current");
    };
    HazardsRatingsComponent.prototype.changePostRating = function (postRating, category) {
        var postRatingScore = parseInt(postRating.Scores);
        var site = this.localStorageService.get('locationData');
        category.currentRatingAns = [];
        for (var i = 0; i < this.ratingAnswers.length; i++) {
            if (parseInt(this.ratingAnswers[i].Scores) <= postRatingScore) {
                category.currentRatingAns.push(this.ratingAnswers[i]);
            }
        }
        this.saveDataToFile(new event_model_1.Event(site.RFS_PARENT_ID, site.RFS_ID, 'save'), category, postRating.Scores, "post");
    };
    HazardsRatingsComponent.prototype.saveDataToFile = function (event, category, score, type) {
        var _this = this;
        var rfsParentId = this.site.RFS_PARENT_ID;
        var rfsId = this.site.RFS_ID;
        if (event.getType() == 'save' && event.getRfsParentId() == rfsParentId && event.getRfsId() == rfsId) {
            this.offlineService.readLocationData(rfsParentId, rfsId).subscribe(function (data) {
                var locData = data;
                var tquestionNumber;
                var questionCategoryData = locData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.RatingPage.QuestionCategory;
                var hazardIndex = questionCategoryData.findIndex(function (x) { return x.QUESTION_CATEGORY_NM === 'Hazards'; });
                if (category) {
                    for (var i = 0; i < questionCategoryData[hazardIndex].TQuestion.length; i++) {
                        if (questionCategoryData[hazardIndex].TQuestion[i].QUESTION_ID == category.QUESTION_ID) {
                            tquestionNumber = i;
                            break;
                        }
                    }
                    if (locData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.RatingPage.QuestionCategory[hazardIndex].TQuestion[tquestionNumber]) {
                        if (type == "post") {
                            locData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.RatingPage.QuestionCategory[hazardIndex].TQuestion[tquestionNumber].ScoreCPPost = "" + score;
                        }
                        else if (type == "current") {
                            locData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.RatingPage.QuestionCategory[hazardIndex].TQuestion[tquestionNumber].Score = "" + score;
                        }
                    }
                }
                var locationDataModel = new location_data_model_1.LocationDataModel(rfsParentId, rfsId, 'natcat-surge');
                locationDataModel.setRawData(locData);
                _this.offlineService.writeLocationData(locationDataModel);
            });
        }
    };
    HazardsRatingsComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'hazards-ratings',
            templateUrl: 'hazards-ratings.component.html',
            providers: [validationMessages_1.ValidationMessages, hazards_service_1.HazardsService]
        }), 
        __metadata('design:paramtypes', [hazards_service_1.HazardsService, localStorageService_1.LocalStorageService, componentCommunicationService_1.ComponentCommunicationService, offline_service_1.OfflineService])
    ], HazardsRatingsComponent);
    return HazardsRatingsComponent;
}());
exports.HazardsRatingsComponent = HazardsRatingsComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
