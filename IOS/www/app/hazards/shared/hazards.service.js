"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var http_1 = require('@angular/http');
require('rxjs/add/operator/map');
var Observable_1 = require('rxjs/Observable');
var configuration_1 = require('../../shared/configuration');
var offline_service_1 = require('../../shared/services/offline.service');
var new_hazard_screen_1 = require('../../shared/model/new-hazard.screen');
var localStorageService_1 = require('../../shared/localStorageService');
var HazardsService = (function () {
    function HazardsService(offlineService, http, configuration, localStorageService) {
        this.offlineService = offlineService;
        this.http = http;
        this.configuration = configuration;
        this.localStorageService = localStorageService;
    }
    HazardsService.prototype.getHazardsData = function (rfsParentId, rfsId) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this.offlineService.readLocationData(rfsParentId, rfsId).subscribe(function (data) {
                _this.mapFromLocationData(data).subscribe(function (data) {
                    observer.next(data);
                    observer.complete();
                });
            }, function (err) { return console.error(err); }, function () { });
        });
    };
    HazardsService.prototype.mapToLocationData = function (locationData, hazardsData) {
        data.LocationAssessment.LAWorkPageList[0].Hazards.name = hazardsData.name;
        return locObj;
    };
    HazardsService.prototype.mapFromLocationData = function (locationData) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            var hazardScreen = new new_hazard_screen_1.NewHazardScreen();
            hazardScreen.predominantTS = locationData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.COPE_PAGE.OFFLNS_ORGNL_OCCUPANCY_CD || "";
            hazardScreen.blockName = locationData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].GRASP_LOCATION_NM || "";
            hazardScreen.sicCode = locationData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.COPE_PAGE.SIC_CD || "";
            hazardScreen.tradeSector = locationData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.COPE_PAGE.OCCUPANCY_CD || "";
            _this.localStorageService.set('occupancy_code', hazardScreen.tradeSector);
            hazardScreen.hazardGrade = locationData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.COPE_PAGE.ENGINEERING_HAZARD_GRADE_CD || "";
            hazardScreen.occupancyGroup = locationData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.COPE_PAGE.OCCUPANCY_GROUP_CD || "";
            hazardScreen.hazards = locationData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.OccupancyHazard.HazardList || [];
            hazardScreen.hazardsRatings = locationData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.RatingPage.QuestionCategory || [];
            hazardScreen.riLinks = locationData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.RiskPage.RiskImprvmnt_PAGES || [];
            hazardScreen.hazardList = locationData.LocationAssessment.LAWorkPageList[0].AssessmentLocationList[0].LocAssessment.OccupancyHazard.HazardList || [];
            var observableHazard = _this.getHazardGrades();
            var observableTradeSector = _this.getTradeSectors();
            Observable_1.Observable.forkJoin([observableHazard, observableTradeSector]).subscribe(function (data) {
                var hgObj = data[0].filter(function (item) { return item.HazardGradeCode == hazardScreen.hazardGrade; });
                hazardScreen["hazardGradeDesc"] = hgObj.length > 0 ? hazardScreen.hazardGrade + " - " + hgObj[0].Description : "";
                var tsObj = data[1].filter(function (item) { return item.Code == hazardScreen.tradeSector; });
                hazardScreen["tradeSectorDesc"] = tsObj.length > 0 ? tsObj[0].Description : "";
                var ptsObj = data[1].filter(function (item) { return item.Code == hazardScreen.predominantTS; });
                hazardScreen["predominantTSDesc"] = ptsObj.length > 0 ? ptsObj[0].Description : "";
                observer.next(hazardScreen);
                observer.complete();
            });
        });
    };
    HazardsService.prototype.getHazardGrades = function () {
        return this.http.request("json/reference-data/hazard-grade.json").map(function (res) { return res.json(); });
    };
    HazardsService.prototype.getTradeSectors = function () {
        return this.http.request("json/reference-data/occupancy.json").map(function (res) { return res.json(); });
    };
    HazardsService.prototype.getMainTypeDropdownData = function () {
        return this.http.request("json/reference-data/hazard-main-type.json").map(function (res) { return res.json(); });
    };
    HazardsService.prototype.getClassDropdownData = function () {
        return this.http.request("json/reference-data/others.json").map(function (res) { return res.json(); });
    };
    HazardsService.prototype.getTypeDropdownData = function () {
        return this.http.request("json/reference-data/hazard-type.json").map(function (res) { return res.json(); });
    };
    HazardsService.prototype.getCategoryOccupancyDropdownData = function () {
        return this.http.request("json/reference-data/hazard-category-vs-occupancy.json").map(function (res) { return res.json(); });
    };
    HazardsService.prototype.getSprinklersData = function (rfsParentId, rfsId) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this.offlineService.readLocationData(rfsParentId, rfsId).subscribe(function (data) {
                observer.next(data.LocationAssessment.LAWorkPageList[0]);
                observer.complete();
            }, function (err) { return console.error(err); }, function () { });
        });
    };
    HazardsService.prototype.getSprinklersDropdownData = function () {
        return this.http.request("json/reference-data/others.json").map(function (res) { return res.json(); });
    };
    HazardsService.prototype.getRatingAnswers = function () {
        return this.http.request("json/reference-data/rating-answers.json").map(function (res) { return res.json(); });
    };
    HazardsService.prototype.getHazardsRatingCP = function () {
        return this.http.request("json/reference-data/rating-cp.json").map(function (res) { return res.json(); });
    };
    HazardsService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [offline_service_1.OfflineService, http_1.Http, configuration_1.Configuration, localStorageService_1.LocalStorageService])
    ], HazardsService);
    return HazardsService;
}());
exports.HazardsService = HazardsService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
