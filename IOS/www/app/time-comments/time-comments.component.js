"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var time_comments_service_1 = require('./time-comments.service');
var configuration_1 = require('../shared/configuration');
var localStorageService_1 = require('../shared/localStorageService');
var componentCommunicationService_1 = require('../shared/componentCommunicationService');
var validationMessages_1 = require('../shared/validationMessages');
var common_service_1 = require('../shared/services/common.service');
var rfs_report_data_model_1 = require('../shared/model/rfs-report-data.model');
var offline_service_1 = require('../shared/services/offline.service');
var event_model_1 = require('../shared/model/event.model');
var TimeAndCommentsComponent = (function () {
    function TimeAndCommentsComponent(timeAndCommentsService, localStorageService, ccs, _validationMessagesService, commonService, offlineService) {
        this.timeAndCommentsService = timeAndCommentsService;
        this.localStorageService = localStorageService;
        this.ccs = ccs;
        this._validationMessagesService = _validationMessagesService;
        this.commonService = commonService;
        this.offlineService = offlineService;
        this._validationMessagesService = _validationMessagesService;
        this.color = "white";
        this.currentYear = new Date().getUTCFullYear();
        this.commonService = commonService;
    }
    TimeAndCommentsComponent.prototype.ngOnInit = function () {
        var _this = this;
        this.viewType = "small";
        this.commonService.globalNarrative = '';
        this.site = this.localStorageService.get('locationData');
        this.comm = { currentState: 'time-comments', isDownloaded: this.site.downloadIndicator == 'F' ? false : true };
        this.ccs.setLogged(this.comm);
        this.validationMessagesObject = this._validationMessagesService.getMessages('error');
        this.getTimeCommmentsDetails();
        this.saveInterval = setInterval(function () {
            var site = _this.localStorageService.get('locationData');
            console.log("Requesting construction to save for rfs parent:", site.RFS_PARENT_ID, "and rfs:", site.RFS_ID);
            _this.saveDataToFile(new event_model_1.Event(site.RFS_PARENT_ID, site.RFS_ID, 'save'));
        }, 30000);
    };
    TimeAndCommentsComponent.prototype.ngOnDestroy = function () {
        if (this.saveInterval) {
            clearInterval(this.saveInterval);
            var site = this.localStorageService.get('locationData');
            this.saveDataToFile(new event_model_1.Event(site.RFS_PARENT_ID, site.RFS_ID, 'save'));
            console.log("Save interval cleared and data saved for construction.");
        }
    };
    TimeAndCommentsComponent.prototype.getTimeCommmentsDetails = function () {
        var _this = this;
        this.offlineService.readRfsReportData(this.site.RFS_PARENT_ID, this.site.RFS_ID).subscribe(function (rfsReportData) {
            if (!rfsReportData.RFSWorkPage) {
                _this.timeCommentsData = {
                    "OnsiteHoursFA": "",
                    "ReportWriteHoursFA": "",
                    "TravelHoursFA": "",
                    "OtherHoursFA": "",
                    "TimeToCompleteFA": "",
                    "TotalRFSCost": ""
                };
            }
            else {
                _this.timeCommentsData = rfsReportData.RFSWorkPage;
            }
        }, function (err) { return console.error(err); }, function () { return console.log('done loading data'); });
    };
    TimeAndCommentsComponent.prototype.updateTotalHours = function () {
        if (this.timeCommentsData.OnsiteHoursFA == null && this.timeCommentsData.ReportWriteHoursFA == null && this.timeCommentsData.TravelHoursFA == null && this.timeCommentsData.OtherHoursFA == null) {
            this.timeCommentsData.TimeToCompleteFA = "";
            return;
        }
        if (this.timeCommentsData.OnsiteHoursFA == null)
            this.timeCommentsData.OnsiteHoursFA = 0;
        if (this.timeCommentsData.ReportWriteHoursFA == null)
            this.timeCommentsData.ReportWriteHoursFA = 0;
        if (this.timeCommentsData.TravelHoursFA == null)
            this.timeCommentsData.TravelHoursFA = 0;
        if (this.timeCommentsData.OtherHoursFA == null)
            this.timeCommentsData.OtherHoursFA = 0;
        this.timeCommentsData.TimeToCompleteFA =
            parseInt(this.timeCommentsData.OnsiteHoursFA) +
                parseInt(this.timeCommentsData.ReportWriteHoursFA) +
                parseInt(this.timeCommentsData.TravelHoursFA) +
                parseInt(this.timeCommentsData.OtherHoursFA);
    };
    TimeAndCommentsComponent.prototype.saveDataToFile = function (event) {
        var _this = this;
        var rfsParentId = this.site.RFS_PARENT_ID;
        var rfsId = this.site.RFS_ID;
        if (event.getType() == 'save' && event.getRfsParentId() == rfsParentId && event.getRfsId() == rfsId) {
            this.offlineService.readRfsReportData(rfsParentId, rfsId).subscribe(function (rfsReportData) {
                var rfsRepData = rfsReportData;
                console.log('hello time-comments', _this.commonService.globalNarrative);
                var rfsReportDataModel = new rfs_report_data_model_1.RfsReportDataModel(rfsParentId, rfsId, 'time-comments');
                rfsReportDataModel.setRawData(rfsRepData);
                _this.offlineService.writeRfsReportData(rfsReportDataModel);
            });
        }
    };
    TimeAndCommentsComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'time-comments',
            templateUrl: 'time-comments.component.html',
            providers: [time_comments_service_1.TimeAndCommentsService, configuration_1.Configuration, localStorageService_1.LocalStorageService, validationMessages_1.ValidationMessages],
        }), 
        __metadata('design:paramtypes', [time_comments_service_1.TimeAndCommentsService, localStorageService_1.LocalStorageService, componentCommunicationService_1.ComponentCommunicationService, validationMessages_1.ValidationMessages, common_service_1.CommonService, offline_service_1.OfflineService])
    ], TimeAndCommentsComponent);
    return TimeAndCommentsComponent;
}());
exports.TimeAndCommentsComponent = TimeAndCommentsComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
