"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var http_1 = require('@angular/http');
require('rxjs/add/operator/map');
var Observable_1 = require('rxjs/Observable');
var configuration_1 = require('./../../shared/configuration');
var offline_service_1 = require('./../../shared/services/offline.service');
var security_screen_1 = require('./../../shared/model/security-screen');
var localStorageService_1 = require('../../shared/localStorageService');
var SecurityService = (function () {
    function SecurityService(offlineService, http, configuration, localStorageService) {
        this.offlineService = offlineService;
        this.http = http;
        this.configuration = configuration;
        this.localStorageService = localStorageService;
    }
    SecurityService.prototype.getSecurityData = function (rfsParentId, rfsId) {
        var _this = this;
        return Observable_1.Observable.create(function (observer) {
            _this.offlineService.readRfsReportData(rfsParentId, rfsId).subscribe(function (data) {
                observer.next(_this.mapFromLocationData(data, new security_screen_1.SecurityScreen()));
                observer.complete();
            }, function (err) { return console.error(err); }, function () { });
        });
    };
    SecurityService.prototype.mapToLocationData = function (rfsReportData, securityScreen) {
        return rfsReportData;
    };
    SecurityService.prototype.mapFromLocationData = function (rfsReportData, securityScreen) {
        console.log('--- security location data --- ', rfsReportData);
        securityScreen.securityWatchService = rfsReportData.RFSWorkPage.FieldActivity.Supervision.SECURITY_ALARM_IN || "";
        securityScreen.roundFrequency = rfsReportData.RFSWorkPage.FieldActivity.Supervision.ROUNDS_PER_DAY_CT || "";
        securityScreen.securityRounds = rfsReportData.RFSWorkPage.FieldActivity.Supervision.SECURITY_ROUND_CD || "";
        securityScreen.coverage = rfsReportData.RFSWorkPage.FieldActivity.Supervision.PLANT_COVER_PC || "";
        securityScreen.securityAlarms = rfsReportData.RFSWorkPage.FieldActivity.Supervision.SECURITY_ALARM_IN || "";
        securityScreen.intrusionAlarmMonitoring = "";
        return securityScreen;
    };
    SecurityService.prototype.getOtherReference = function () {
        return this.http.request("json/reference-data/others.json").map(function (res) { return res.json(); });
    };
    SecurityService.prototype.getSecurityRiskRatings = function () {
        return this.http.request("json/reference-data/rating-answers.json").map(function (res) { return res.json(); });
    };
    SecurityService = __decorate([
        core_1.Injectable(), 
        __metadata('design:paramtypes', [offline_service_1.OfflineService, http_1.Http, configuration_1.Configuration, localStorageService_1.LocalStorageService])
    ], SecurityService);
    return SecurityService;
}());
exports.SecurityService = SecurityService;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
