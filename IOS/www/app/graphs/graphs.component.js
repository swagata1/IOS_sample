"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
var __metadata = (this && this.__metadata) || function (k, v) {
    if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(k, v);
};
var core_1 = require('@angular/core');
var GraphsComponent = (function () {
    function GraphsComponent() {
        this.yLogScale = false;
        this.chartColorsHierarchy = [];
        this.chartColorsHierarchy = ['#00A4E4', '#FBCA5C', '#92B45B', '#0073AE', '#858585', '#F2F2F2', '#66C8EE', '#FDDF9D', '#BDD19D'];
    }
    GraphsComponent.prototype.ngOnInit = function () {
        this.options = this.dataForOptions;
        this.data = this.updateSeriesColors(this.dataForChart);
        if (this.yLogScale) {
            this.options.chart.yScale = d3.scale.log().base(1.85);
            this.options.chart.yAxis.tickFormat = function (d) {
                return d3.format(',.2r')(d);
            };
        }
    };
    GraphsComponent.prototype.ngOnChanges = function () {
        this.data = this.updateSeriesColors(this.dataForChart);
        console.log('this.data in graphs.component.ts file.');
        console.log(this.data);
    };
    GraphsComponent.prototype.updateSeriesColors = function (data) {
        for (var i = 0; i < data.length; i++) {
            data[i].color = this.chartColorsHierarchy[i];
            if (data[i].dashed) {
                data[i].classed = 'dashed';
            }
        }
        return data;
    };
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], GraphsComponent.prototype, "dataForChart", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Boolean)
    ], GraphsComponent.prototype, "yLogScale", void 0);
    __decorate([
        core_1.Input(), 
        __metadata('design:type', Object)
    ], GraphsComponent.prototype, "dataForOptions", void 0);
    GraphsComponent = __decorate([
        core_1.Component({
            moduleId: module.id,
            selector: 'axis-graphs',
            templateUrl: 'graphs.component.html',
        }), 
        __metadata('design:paramtypes', [])
    ], GraphsComponent);
    return GraphsComponent;
}());
exports.GraphsComponent = GraphsComponent;

//# sourceMappingURL=data:application/json;charset=utf8;base64,
